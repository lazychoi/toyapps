<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>테트리스</title>
    <link rel="stylesheet" href="tetris.css">
</head>
<body>
    <canvas width="320" height="640" id="game"></canvas>
    <script>
        const canvas = document.getElementById('game')
        const ctx = canvas.getContext('2d');
        const grid = 32;
        let rAF = null;  // keep track of the animation frame so we can cancel it

        const tetrominos = {
            'I': [
                [0,0,0,0],
                [1,1,1,1],
                [0,0,0,0],
                [0,0,0,0]
            ],
            'J': [
                [1,0,0],
                [1,1,1],
                [0,0,0],
            ],
            'L': [
                [0,0,1],
                [1,1,1],
                [0,0,0],
            ],
            'O': [
                [1,1],
                [1,1],
            ],
            'S': [
                [0,1,1],
                [1,1,0],
                [0,0,0],
            ],
            'Z': [
                [1,1,0],
                [0,1,1],
                [0,0,0],
            ],
            'T': [
                [0,1,0],
                [1,1,1],
                [0,0,0],
            ]
        };
        
        // color of each tetromino
        const colors = {
            'I': 'cyan',
            'O': 'yellow',
            'T': 'purple',
            'S': 'green',
            'Z': 'red',
            'J': 'blue',
            'L': 'orange'
        };

        // 게임판 배열 만들기
        const gamefield = [];
        for (let row = -2; row < 20; row++) {       // 블록이 안 보이는 곳에서부터 떨어지게 상단을 -2부터 시작
            gamefield[row] = [];
            for (let col = 0; col < 10; col++) {
                gamefield[row][col] = 0;
            }
        }

        // 다음 순서 블록 가져오기
        function getNextTetromino() {
            // 블록 랜덤하게 섞기
            const tetrominoNames = ['I', 'J', 'L', 'O', 'S', 'T', 'Z'];
            const rand = Math.floor(Math.random() * tetrominoNames.length);
            const tetrominoName = tetrominoNames[rand];  // 
            const tetrominoArray = tetrominos[tetrominoName];  // 블록 배열값 저장
        
            // 블록 가로 중심을 게임판 가로 중앙에 위치
            let x = gamefield[0].length / 2 - Math.ceil(tetrominoArray[0].length / 2);
        
            // I 시작위치 -> row 21(-1), 나머지 -> row 22(-2) I는 4x4이기 때문에
            let y = name === 'I' ? -1 : -2;
        
            return {
                tetrominoName: tetrominoName,       // name of the piece (L, O, etc.)
                tetrominoArray: tetrominoArray,     // the current rotation matrix
                x: x,                               // current x
                y: y                                // current y (starts offscreen)
            };
        }

        function rotate(tetrominoArray) {
            // 블록 회전
            const N = tetrominoArray.length - 1;
            const rotatedArray = tetrominoArray.map((row, i) =>    // i = row index
                row.map((val, j) => tetrominoArray[N - j][i])  // j = col index
            );
            return rotatedArray;
        }

        function isValidMove(tetrominoArray, x, y) {
            // 이동하려는 곳이 유효한지 확인
            for (let row = 0; row < tetrominoArray.length; row++) {
              for (let col = 0; col < tetrominoArray[row].length; col++) {
                if (tetrominoArray[row][col] && (           // 블록 배열값이 0이 아니면서
                    col + x < 0 ||                          // 이동할 곳(col + x)이 왼쪽 벽을 지나거나
                    col + x >= gamefield[row].length ||     // 이동할 곳(col + x)이 오른쪽 벽을 지나거나
                    row + y >= gamefield.length ||          //이동할 곳(row + y)이 게임판 길이(20) 이상이거나
                    gamefield[row + y][col + x] ))          // 다른 블록에 부딪히면 = 게임판에 블록 문자가 있으면 
                {
                    return false; 
                }
              }
            }
            return true;  // 이동할 곳이 게임판 안쪽이면 true 반환
        }

        // 비활성 블록을 게임판으로 변환
        function tetrominoToGamefield() {
            for (let row = 0; row < tetromino.tetrominoArray.length; row++) {
                for (let col = 0; col < tetromino.tetrominoArray[row].length; col++) {
                    if (tetromino.tetrominoArray[row][col]) {
                        
                        // 블록이 게임판 위쪽 밖으로 벗어나면 게임 종료
                        if (row + tetromino.y < 0) {
                            return cancelAnimationFrame(rAF);
                        }
                        // 블록 위치의 게임판에 블록 이름 입력
                        gamefield[row + tetromino.y][col + tetromino.x] = tetromino.tetrominoName;
                        //console.log(gamefield);
                    }
                }
            }

            // 채워진 행부터 위쪽으로 모든 셀이 다 채워졌는지 검사
            for (let row = gamefield.length - 1; row >= 0; ) {
                if (gamefield[row].every(cell => cell)) {     //행의 모든 셀이 다 채워졌으면
                    // drop every row above this one
                    for (let r = row; r >= 0; r--) {              // 바로 위의 행으로 바꾸기
                        for (let c = 0; c < gamefield[r].length; c++) {
                            gamefield[r][c] = gamefield[r-1][c];
                        }
                    }
                }
                else {      
                    row--;  // 한 행 위로 올라간다. for문의 세번째 조건을 여기에 쓴다.
                }
            }
            tetromino = getNextTetromino();     // 다음 블록 가져오기
        }

        let tetromino = getNextTetromino();
        let latency = 0;
        function loop() {
            // 애니메이션 시작
            rAF = requestAnimationFrame(loop);  // 이곳에 있어야 행이 채워졌을 때 사라짐
            // 게임판 지우기
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // 게임판 그리기
            for (let row = 0; row < 20; row++) {
                for (let col = 0; col < 10; col++) {
                    if (gamefield[row][col]) {
                        const name = gamefield[row][col];   // 게임판의 블록명 가져오기
                        // console.log('게임판의 블록', name)
                        ctx.fillStyle = colors[name];       // 블록 색상 가져오기  
                        // 한 셀의 크기=grid -> col(x), row(y) * grid -> 시작좌표 // -1은 테두리가 생기도록 하기 위해
                        ctx.fillRect(col * grid, row * grid, grid-1, grid-1);
                    }
                }
            }

            if(tetromino){
                // 떨어지는 속도 조절. 10번은 같은 위치에서 블록 그림. 11번째 세로로 한 칸 이동
                latency++;
                if(latency > 30) { 
                    tetromino.y++; 
                    latency = 0;
                }
                if(!isValidMove(tetromino.tetrominoArray, tetromino.x, tetromino.y)){
                    tetromino.y--;              // 이동할 수 없는 곳이면 증가한 값 취소
                    tetrominoToGamefield();     // 비활성 블록을 게임판으로 변환
                }
                
                // isValidMove == true -> 한 칸 아래로 블록 이동
                ctx.fillStyle = colors[tetromino.tetrominoName];
                for (let row = 0; row < tetromino.tetrominoArray.length; row++) {
                    for (let col = 0; col < tetromino.tetrominoArray[row].length; col++) {
                        if (tetromino.tetrominoArray[row][col]) {
                            ctx.fillRect((col + tetromino.x) * grid, (row + tetromino.y) * grid, grid-1, grid-1); 
                        }
                    }
                }
            }
        }

        document.addEventListener('keydown', function(e) {

            //if (gameOver) return;
            
            // left and right arrow keys (move)
            if (e.key == 'ArrowLeft' || e.key == 'ArrowRight') {
              const moveX = e.key === 'ArrowLeft' ? tetromino.x - 1 : tetromino.x + 1;
              if (isValidMove(tetromino.tetrominoArray, moveX, tetromino.y)) {
                tetromino.x = moveX;
              }
            }
          
            // down arrow key (drop)
            if(e.key = 'ArrowDown') {
                const moveY = tetromino.y + 1;
                if (!isValidMove(tetromino.tetrominoArray, tetromino.x, moveY)) {
                    tetromino.y = moveY - 1;      // 유효한 이동위치가 아니면 증가시킨 y값 되돌리기
                    tetrominoToGamefield();
                    return;
                } else {
                    tetromino.y = moveY;
                }
            }

            // up arrow key (rotate)
            if (e.key == 'ArrowUp') {
                const matrix = rotate(tetromino.tetrominoArray);
                if (isValidMove(matrix, tetromino.x, tetromino.y)) {
                    tetromino.tetrominoArray = matrix;
                }
            }
        });

        rAF = requestAnimationFrame(loop);

    </script>
</body>
</html>