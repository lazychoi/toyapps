<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>테트리스</title>
    <link rel="stylesheet" href="tetris.css">
</head>
<body>
    <canvas width="320" height="640" id="game"></canvas>
    <script>
        const canvas = document.getElementById('game')
        const ctx = canvas.getContext('2d');
        const grid = 32;
        let x = 4, y = 0;

        const tetrominos = {
            'T': [
                [0,1,0],
                [1,1,1],
                [0,0,0],
            ]
        };
        
        // color of each tetromino
        const colors = {
            'T': 'purple',
        };

        let tetromino = tetrominos['T'];

        function isValidMove(tetromino, x, y) {
            for (let row = 0; row < tetromino.length; row++) {
              for (let col = 0; col < tetromino[row].length; col++) {
                if (tetromino[row][col] && ( 
                    (col + x) < 0 ||    // 이동할 곳(col + x)이 왼쪽 벽을 지나거나
                    (col + x) >= 10 ||  // 이동할 곳(col + x)이 오른쪽 벽을 지나거나
                    (row + y) >= 19 ) )  //이동할 곳(row + y)이 게임판 길이(20) 이상이면
                { 
                    return false; 
                }
              }
            }
            return true;  // 이동할 곳이 게임판 안쪽이면 true 반환
        }

        let latency = 0;
        function loop() {
            // 애니메이션 시작
            rAF = requestAnimationFrame(loop);
            
            // 게임판 지우기
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // 떨어지는 속도 조절. 10번은 같은 위치에서 블록 그림. 11번째 세로로 한 칸 이동
            latency++;
            if(latency > 60 && isValidMove(tetromino, x, y)) { 
                y++; 
                latency = 0;
                console.log(y);
            }
            
            // isValidMove == true -> 한 칸 아래로 블록 이동
            ctx.fillStyle = colors['T'];
            for (let row = 0; row < tetromino.length; row++) {
                for (let col = 0; col < tetromino[row].length; col++) {
                    if (tetromino[row][col]) {
                        ctx.fillRect((col + x) * grid, (row + y) * grid, grid-1, grid-1); 
                    }
                }
            }
        }

        document.addEventListener('keydown', function(e) {
            console.log(e.key);
            // left and right arrow keys (move)
            if (e.key == 'ArrowLeft' || e.key == 'ArrowRight') {
              const moveX = e.key === 'ArrowLeft' ? x - 1 : x + 1;
              if (isValidMove(tetromino, moveX, y)) {
                x = moveX;
              }
            }
          
            // down arrow key (drop)
            if(e.key = 'ArrowDown') {
                const moveY = y + 1;
                if (!isValidMove(tetromino, x, moveY)) {
                    y = moveY - 1;      // 유효한 이동위치가 아니면 증가시킨 y값 되돌리기
                } else {
                    y = moveY;
                }
            }
        });

        requestAnimationFrame(loop);

    </script>
</body>
</html>